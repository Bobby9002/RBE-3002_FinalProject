#!/usr/bin/env python

import rospy	#import rospy for ROS Node

from geometry_msgs.msg import Twist	#import Twist command from geometry_msgs

import sys	#import sys for arguments

def publishTwist(u,w):	#takes the linear and angular velocity as inputs and publishes them to the robot.
	pub = rospy.Publisher('/cmd_vel_mux/input/teleop', Twist)	#publishing to cmd_vel_mux/input/teleop topic
									#using the message type Twist from geometry.msgs.msg.Twist
	twist = Twist()	#define own twist
	twist.linear.x = u; twist.linear.y = 0; twist.linear.z = 0;	#set the linear velocity
	twist.angular.x = 0; twist.angular.y = 0; twist.angular.z = w;	#set the angular velocity
	pub.publish(twist)		#publish the twist messages

def spinWheels(u1, u2, time):	#takes as input the velocities of the left and right wheels, 
				#computes the translational and rotational robot velocities and 
				#drives the robot for the specified period of time.
	while True:	
		init_time = rospy.get_time()	#determine current time in seconds 
		if not init_time == 0:
			break;
	while True:
		#map wheel speeds to linear and angular velocities	
		u = 0.0175*(u1+u2)	#calculated from forward kinematics of the robot in prelab
		w = 0.3937*(u1-u2)	
		publishTwist(abs(u),abs(w))	#call publishTwist with the calculated arguments

		while True:
			final_time = rospy.get_time()	#determine current time in seconds 
			if not final_time == 0:
				break;

		time_elapsed = final_time - init_time
		if time_elapsed >= time:	#if time reached
			print 'time_elapsed', time_elapsed
			break;	#break out of the loop
	
	
if __name__ == '__main__':
    try:
	rospy.init_node('lab2')
	rospy.myargv(argv=sys.argv)
	if len(sys.argv) < 4:
		print 'Invalid number of arguments'
	else:
		print 'spinning wheels'
		spinWheels(float(sys.argv[1]), float(sys.argv[2]), float(sys.argv[3]))
    except rospy.ROSInterruptException:
        pass

